from aiogram import Bot, Dispatcher, executor, exceptions
from aiogram.types import ReplyKeyboardMarkup, ChatJoinRequest, Message, ContentType, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

import asyncio
import sqlite3

from BError import BError
from config import TOKEN, CHAT_ID, LOG_CHAT, ADMINS

storage = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot,
                storage=storage)
db = sqlite3.connect("user_info.db")
db.row_factory = lambda cursor, row: row[0]

status_member = ['creator', 'administrator', 'member']

time_to_invite = 60 * 30 # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

class ClientStatesGroup(StatesGroup):
    photo = State()
    description = State()
    accept = State()

class InviteStatesGroup(StatesGroup):
    time = State()

from aiogram.dispatcher.filters import Text

async def check_admins(id: int):
    if id not in ADMINS:
        await bot.send_message(chat_id=id, text=f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
        return False
    return True

def get_cancel() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å'))

def get_accept() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'))
    kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å'))
    return kb

def get_main_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True,
                                one_time_keyboard=True)
    kb.add(KeyboardButton(text="–ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"))
    kb.add(KeyboardButton(text="–ü–æ—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"))
    kb.add(KeyboardButton(text="–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"))
    #kb.add(KeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª")) # –≤—Ä–µ–º–µ–Ω–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    return kb

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å', ignore_case=True), state='*')
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    if not await check_admins(message.chat.id):
        return
    if await state.get_state() is None:
        return
    await message.reply('–û—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_main_keyboard())
    await state.finish()

@dp.message_handler(lambda message: not message.photo, state=ClientStatesGroup.photo)
async def check_photo(message: Message):
    if not await check_admins(message.chat.id):
        return
    return await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')

@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=ClientStatesGroup.photo)
async def load_photo(message: Message, state: FSMContext):
    if not await check_admins(message.chat.id):
        return
    async with state.proxy() as data:
        data['photo'] = message.photo[-1].file_id
    await ClientStatesGroup.description.set()
    await message.reply('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ')

@dp.message_handler(state=ClientStatesGroup.description)
async def add_description(message: Message, state: FSMContext):
    if not await check_admins(message.chat.id):
        return
    async with state.proxy() as data:
        data['desc'] = message.text
    await ClientStatesGroup.accept.set()
    await message.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç', reply_markup=get_accept())

@dp.message_handler(Text(equals="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", ignore_case=True), state=ClientStatesGroup.accept)
async def accept(message: Message, state: FSMContext):
    if not await check_admins(message.chat.id):
        return
    try:
        async with state.proxy() as data:
            if data['photo'] is not None:
                print ('send_photo')
                await send_message_to_all_users(message=message,
                                                text=data['desc'],
                                                file_photo_id=data['photo'])
            else:
                print ('send_message')
                await send_message_to_all_users(message=message,
                                                text=data['desc'])
            await message.reply('üéâ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéâ', reply_markup=get_main_keyboard())
            await state.finish()
    except Exception as error:
        await message.reply(f'–£–ø—Å! –°–ª—É—á–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ—Å—Ç: \n{error}', reply_markup=get_main_keyboard())
        await state.finish()

@dp.message_handler(Text(equals='–ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π', ignore_case=True))
async def post_with_photo(message: Message):
    if not await check_admins(message.chat.id):
        return
    await ClientStatesGroup.photo.set()
    await message.answer('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.', reply_markup=get_cancel())

@dp.message_handler(Text(equals='–ü–æ—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏', ignore_case=True))
async def post_text(message: Message, state: FSMContext):
    if not await check_admins(message.chat.id):
        return
    async with state.proxy() as data:
        data['photo'] = None
    await ClientStatesGroup.description.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç', reply_markup=get_cancel())

@dp.message_handler(commands=['photo'])
async def photo_bot(message: Message):
    if not await check_admins(message.chat.id):
        return
    await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
    await bot.send_photo(chat_id=message.chat.id, photo=message.photo, caption=f'{message.text}')

# @dp.message_handler(commands=['chatid'])
# async def get_chatid(message: Message):
#     await bot.send_message(message.chat.id, f"chatid: {message.chat.id}")
#     await bot.send_message(message.chat.id, f'user_chatid: {message.from_user.id}')

@dp.message_handler(commands=['start'], state=None)
async def start_bot(message: Message):
    if not await check_admins(message.chat.id):
        return
    kb = get_main_keyboard()
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, –ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', reply_markup=kb)

@dp.message_handler(Text(equals='–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', ignore_case=True))
async def users_count(message: Message):
    if not await check_admins(message.chat.id):
        return
    await message.answer(text=f'–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await count_users_from_db()}')

@dp.message_handler(Text(equals='–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª', ignore_case=True))
async def change_time(message: Message):
    if not await check_admins(message.chat.id):
        return
    await InviteStatesGroup.time.set()
    await message.answer(text=f'–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await count_users_from_db()}')

@dp.message_handler(state=InviteStatesGroup.time)
async def change_number(message: Message):
    if not await check_admins(message.chat.id):
        return
    try:
        number = int(message.text)
        await message.answer(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–Ω—è—Ç–∏—è –≤ –∫–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {number}')
    except:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ')

@dp.chat_join_request_handler()
async def echo(chat_member: ChatJoinRequest):
    kb = ReplyKeyboardMarkup(resize_keyboard=True,
                                   one_time_keyboard=True)
    kb.add(KeyboardButton(text="üßô –Ø —á–µ–ª–æ–≤–µ–∫",))
    await bot.send_message(chat_id=chat_member.from_user.id, text=f'–ü—Ä–∏–≤–µ—Ç, {chat_member.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª! \n–Ø –∞–Ω—Ç–∏-—Å–ø–∞–º –±–æ—Ç. \n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üßô –Ø —á–µ–ª–æ–≤–µ–∫¬ª',reply_markup=kb)

@dp.message_handler(Text(endswith='–Ø —á–µ–ª–æ–≤–µ–∫', ignore_case=True))
async def message_check(message: Message):
    await send_log(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id: {message.from_user.id} –∏ –∏–º–µ–Ω–µ–º: {message.from_user.full_name} –ù–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üßô –Ø —á–µ–ª–æ–≤–µ–∫¬ª')
    await check_member_status(message)
    await bot.send_message(chat_id=message.from_user.id, text='–°–ø–∞—Å–∏–±–æ, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –±–æ—Ç–æ–º. –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç.')
    await save_user_to_db(message)
    await asyncio.sleep(10)
    await send_log(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id: {message.from_user.id} –∏ –∏–º–µ–Ω–µ–º: {message.from_user.full_name} –±—ã–ª –∞–ø–ø—Ä—É–≤–Ω—É—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ')
    try:
        await bot.approve_chat_join_request(CHAT_ID, message.from_user.id)
    except Exception as error:
        await send_log(f'–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ –≤—Ä–µ–º—è –∞–ø—Ä—É–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error}')


async def check_member_status(message: Message):
    member = await bot.get_chat_member(chat_id=CHAT_ID, user_id=message.from_user.id)
    for i in status_member:
        if i == member.status:
            return await bot.send_message(chat_id=message.from_user.id, text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–∞–Ω–∞–ª–µ.')

async def save_user_to_db(message: Message):
    cursor = db.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS user(
	 	id INTEGER
	 	);""")
    db.commit()
    user_id = message.from_user.id
    cursor.execute(f"SELECT id FROM user WHERE id = {user_id};")
    data = cursor.fetchone()
    if data is None:
        cursor.execute(f"INSERT INTO user (id) VALUES ({user_id});")
        db.commit()
    cursor.close()

async def count_users_from_db() -> int:
    cursor = db.cursor()
    cursor.execute('SELECT COUNT(*) FROM user;')
    data = cursor.fetchone()
    cursor.close()
    if data is None:
        return 0
    return data
    

async def send_message_to_all_users(message: Message, text: str, file_photo_id: str = None):
    file_photo_id = file_photo_id
    text = text
    cursor = db.cursor()
    cursor.execute(f"SELECT id FROM user;")
    data = cursor.fetchall()
    dict = { BError.BotBlocked: 0, BError.ChatNotFound: 0,
             BError.RetryAfter: 0, BError.UserDeactivated: 0,
             BError.TelegramAPIError: 0, BError.Success: 0 }

    for chat_id in data:
        await send_bot_message(chat_id=chat_id,
                               errors_dict=dict,
                               text=text,
                               file_photo_id=file_photo_id)
    await send_statistics(message, LOG_CHAT, dict)
    cursor.close()

async def send_bot_message(chat_id: int,
                           errors_dict: dict[BError, int],
                           text: str,
                           file_photo_id: str = None):
    try:
        if file_photo_id is None:
            await bot.send_message(chat_id=chat_id, text=text)
        else:
            await bot.send_photo(chat_id=chat_id,
                                  photo=file_photo_id,
                                  caption=text)
    except exceptions.BotBlocked:
        errors_dict[BError.BotBlocked] += 1
    except exceptions.ChatNotFound:
        errors_dict[BError.ChatNotFound] += 1
    except exceptions.RetryAfter as e:
        errors_dict[BError.RetryAfter] += 1
        await bot.send_message(LOG_CHAT,
                              f"Target [ID:{chat_id}]: Flood limit is exceeded. "
                              f"Sleep {e.timeout} seconds.")
        await asyncio.sleep(e.timeout)
        return await bot.send_message(chat_id, text=f'–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —é–∑–µ—Ä–∞–º')  # Recursive call
    except exceptions.UserDeactivated:
        errors_dict[BError.UserDeactivated] += 1
    except exceptions.TelegramAPIError:
        errors_dict[BError.TelegramAPIError] += 1
    else:
        errors_dict[BError.Success] += 1
        return True
    return False

async def send_statistics(message: Message, chat_id: int, stat_dict: dict[BError, int]):
    message = """
‚ö†Ô∏è<b>–ë—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {} </b>‚ö†Ô∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º: {}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ–π —á–∞—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω: {}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–¥–µ –Ω—É–∂–µ–Ω retry message: {} (–æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–æ—Ç: {}
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ TelegramAPIError: {}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ø–µ—à–Ω—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º: {}
    """.format(str(message.from_user.full_name), str(stat_dict[BError.BotBlocked]), str(stat_dict[BError.ChatNotFound]),
               str(stat_dict[BError.RetryAfter]), str(stat_dict[BError.UserDeactivated]),
               str(stat_dict[BError.TelegramAPIError]), str(stat_dict[BError.Success]))
    await send_log(message)

async def send_log(message: str):
    await bot.send_message(LOG_CHAT, message, parse_mode='html')

@dp.message_handler(commands=['log'])
async def send_logger(message: Message):
    await send_log('ku')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)